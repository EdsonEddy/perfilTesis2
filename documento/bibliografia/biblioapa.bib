@article{article2,
  title={Detecting and Measuring Similarity in Code Clones},
  author={Randy, Smith},
  journal={},
  volume={73},
  number={288},
  pages={3--37},
  year={2009},
  publisher={Department of Computer Sciences, University of Wisconsin Madison}
}

@article{10.1145/3313290,
author = {Novak, Matija and Joy, Mike and Kermek, Dragutin},
title = {Source-Code Similarity Detection and Detection Tools Used in Academi: A Systematic Review},
year = {2019},
issue_date = {June 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {3},
url = {http://doi.org/10.1145/3313290},
doi = {10.1145/3313290},
abstract = {Teachers deal with plagiarism on a regular basis, so they try to prevent and detect plagiarism, a task that is complicated by the large size of some classes. Students who cheat often try to hide their plagiarism (obfuscate), and many different similarity detection engines (often called plagiarism detection tools) have been built to help teachers. This article focuses only on plagiarism detection and presents a detailed systematic review of the field of source-code plagiarism detection in academia. This review gives an overview of definitions of plagiarism, plagiarism detection tools, comparison metrics, obfuscation methods, datasets used for comparison, and algorithm types. Perspectives on the meaning of source-code plagiarism detection in academia are presented, together with categorisations of the available detection tools and analyses of their effectiveness. While writing the review, some interesting insights have been found about metrics and datasets for quantitative tool comparison and categorisation of detection algorithms. Also, existing obfuscation methods classifications have been expanded together with a new definition of “source-code plagiarism detection in academia.”},
journal = {ACM Trans. Comput. Educ.},
month = {may},
articleno = {27},
numpages = {37},
keywords = {similarity, education, detection, programming, systematic review, academia, Source-code, plagiarism}
}

@unknown{unknown1,
author = {Cheers, Hayden and Lin, Yuqing and Smith, Shamus},
year = {2021},
month = {02},
pages = {},
title = {Academic Source Code Plagiarism Detection by Measuring Program Behavioural Similarity}
}

@article{article1,
author = {Díaz, Javier and Banchoff, Lic and Rodríguez, Lic},
year = {2007},
month = {01},
pages = {},
title = {"Herramientas para la detección de plagio de software. Un caso de estudio en trabajos de cátedra"}
}

@book{book1,
  title={Generaci{\'o}n de un algoritmo para el an{\'a}lisis de similitudes de c{\'o}digo fuente en lenguajes Java y Python},
  author={Pach{\'o}n, H.J.C.},
  url={http://books.google.com.bo/books?id=dlaszQEACAAJ},
  year={2019},
  publisher={Uniandes}
}

@article{Hage2010ACO,
  title={A comparison of plagiarism detection tools},
  author={Jurriaan Hage and Peter Rademaker},
  year={2010}
}

@unknown{wiki:Plagiarism,
   author = "Wikipedia",
   title = "{Plagiarism} --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2021",
   howpublished = {\url{htt://en.wikiipedia.org/w/index.php?title=Plagiarism&oldid=1058139870}},
   note = "[Online; accessed 02-December-2021]"
 }

 @unknown{wiki:Source_Code,
   author = "Wikipedia",
   title = "{Source Code} --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2021",
   howpublished = {\url{htt://en.wikiipedia.org/w/index.php?title=Source\%20Code&oldid=1057866572}},
   note = "[Online; accessed 02-December-2021]"
 }

 @unknown{wiki:Obfuscation_(software),
   author = "Wikipedia",
   title = "{Obfuscation (software)} --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2021",
   howpublished = {\url{htt://en.wikiipedia.org/w/index.php?title=Obfuscation\%20(software)&oldid=1056756228}},
   note = "[Online; accessed 02-December-2021]"
 }
@unknown{wiki:Control-flow_graph,
   author = "Wikipedia",
   title = "{Control-flow graph} --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2021",
   howpublished = {\url{htt://en.wikiipedia.org/w/index.php?title=Control-flow\%20graph&oldid=1050421841}},
   note = "[Online; accessed 02-December-2021]"
 }

@article{article3,
author = {Marzieh, Ahmadzadeh and Mahmoudabadi, Elham and Khodadadi, Farzad},
year = {2011},
month = {01},
pages = {},
title = {Pattern of Plagiarism in Novice Students Generated Program: An Experimental Approach},
volume = {10},
journal = {The Journal of Information Technology Education},
doi = {10.28945/1509}
}

@article{donaldson1981plagiarism,
  title={A plagiarism detection system},
  author={Donaldson, John L and Lancaster, Ann-Marie and Sposato, Paula H},
  booktitle={Proceedings of the twelfth SIGCSE technical symposium on Computer science education},
  pages={21--25},
  year={1981}
}

@article{ChangeDistiller,
author = {Würsch, Michael and Gall, Harald and Fluri, Beat and Kiefer, Christoph},
year = {2022},
month = {02},
pages = {},
title = {Improving ChangeDistiller Improving Abstract Syntax Tree based Source Code Change Detection}
}

@book{aho2008compiladores,
author = {Aho, Alfred},
title = {Compiladores: principios, tecnicas y herramientas},
publisher = {Pearson Educacion},
year = {2008},
address = {Mexico},
isbn = {978-970-26-1133-2}
}

@book{catalan2010compiladores,
author = {Catalán, Jacinto},
title = {Compiladores : teoría e implementación},
publisher = {RC Libros},
year = {2010},
address = {San Fernando de Henares, Madrid},
isbn = {978-84-937008-9-8}
}

@book{Halim2019,
title = "Programacion competitiva",
author = "Halim, Felix and Halim, Steven",
publisher = "Independently Published",
month =  {dec},
year =  {2019},
language  = "es"
}

@book{Cormen2009,
title = "Introduction to Algorithms",
author = "Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford",
publisher = "MIT Press",
series = "The MIT Press",
month =  {jul},
year =  {2009},
address = "London, England"
}

@book{Aho1999,
title = "Estructuras de datos y algoritmos",
author = "Aho, Alfred V",
publisher = "Addison Wesley Longman",
month = {apr},
year = {1999},
address = "Singapore, Singapore",
language = "en"
}


@article{10.1093/comjnl/bxs018,
    author = {Đurić, Zoran and Gašević, Dragan},
    title = "{A Source Code Similarity System for Plagiarism Detection}",
    journal = {The Computer Journal},
    volume = {56},
    number = {1},
    pages = {70-86},
    year = {2012},
    month = {03},
    abstract = "{Source code plagiarism is an easy to do task, but very difficult to detect without proper tool support. Various source code similarity detection systems have been developed to help detect source code plagiarism. Those systems need to recognize a number of lexical and structural source code modifications. For example, by some structural modifications (e.g. modification of control structures, modification of data structures or structural redesign of source code) the source code can be changed in such a way that it almost looks genuine. Most of the existing source code similarity detection systems can be confused when these structural modifications have been applied to the original source code. To be considered effective, a source code similarity detection system must address these issues. To address them, we designed and developed the source code similarity system for plagiarism detection. To demonstrate that the proposed system has the desired effectiveness, we performed a well-known conformism test. The proposed system showed promising results as compared with the JPlag system in detecting source code similarity when various lexical or structural modifications are applied to plagiarized code. As a confirmation of these results, an independent samples t-test revealed that there was a statistically significant difference between average values of F-measures for the test sets that we used and for the experiments that we have done in the practically usable range of cut-off threshold values of 35–70\\%.}",
    issn = {0010-4620},
    doi = {10.1093/comjnl/bxs018},
    url = {https://doi.org/10.1093/comjnl/bxs018},
    eprint = {https://academic.oup.com/comjnl/article-pdf/56/1/70/1419281/bxs018.pdf},
}

@article{10.1145/953049.800954,
author = {Grier, Sam},
title = {A Tool That Detects Plagiarism in Pascal Programs},
year = {1981},
issue_date = {February 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/953049.800954},
doi = {10.1145/953049.800954},
abstract = {Plagiarism has become a problem in introductory Computer Science courses. Programmed assignments can be copied and transformed with little human effort. A pertinent recommendation has resulted from this realization; an on-line system to detect programs that are “too similar” and hence suspected of plagiarism should be developed [4]. This paper discusses such a system for Pascal programs.},
journal = {SIGCSE Bull.},
month = {feb},
pages = {15–20},
numpages = {6}
}

@inproceedings{10.1145/800037.800954,
author = {Grier, Sam},
title = {A Tool That Detects Plagiarism in Pascal Programs},
year = {1981},
isbn = {0897910362},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800037.800954},
doi = {10.1145/800037.800954},
abstract = {Plagiarism has become a problem in introductory Computer Science courses. Programmed assignments can be copied and transformed with little human effort. A pertinent recommendation has resulted from this realization; an on-line system to detect programs that are “too similar” and hence suspected of plagiarism should be developed [4]. This paper discusses such a system for Pascal programs.},
booktitle = {Proceedings of the Twelfth SIGCSE Technical Symposium on Computer Science Education},
pages = {15–20},
numpages = {6},
location = {St. Louis, Missouri, USA},
series = {SIGCSE '81}
}

@article{WHALE1990131,
title = {Software metrics and plagiarism detection},
journal = {Journal of Systems and Software},
volume = {13},
number = {2},
pages = {131-138},
year = {1990},
note = {Special Issue on Using Software Metrics},
issn = {0164-1212},
doi = {https://doi.org/10.1016/0164-1212(90)90118-6},
url = {https://www.sciencedirect.com/science/article/pii/0164121290901186},
author = {Geoff Whale},
abstract = {The reliability of plagiarism detection systems, which try to identify similar programs in large populations, is critically dependent on the choice of program representation. Software metrics conventionally used as representations are described, and the limitations of metrics adapted from software complexity measures are outlined. An application-specific metric is proposed, one that represents the structure of a program as a variable-length profile. Its constituent terms, each recording the control structures in a program fragment, are ordered for efficient comparision. The superior performance of the plagiarism detection system based on this profile is reported, and deriving complexity measures from the profile is discussed.}
}